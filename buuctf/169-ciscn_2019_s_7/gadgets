


Gadgets
=======


0x00000000000014af: add bl, dh; ret; 
0x000000000000100e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rbp*8 + 0x55], 0x48; mov ebp, esp; call rax; 
0x00000000000014ad: add byte ptr [rax], al; add bl, dh; ret; 
0x00000000000014ab: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000000f9c: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000011f3: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; ret; 
0x0000000000001340: add byte ptr [rax], al; add byte ptr [rcx - 0x15], dh; sbb cl, byte ptr [rax - 0x77]; ret; 
0x0000000000000e2b: add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000013dc: add byte ptr [rax], al; call 0x1387; pop rbp; ret; 
0x000000000000108a: add byte ptr [rax], al; call 0xeb8; nop; pop rbp; ret; 
0x00000000000013d7: add byte ptr [rax], al; mov edi, 1; call 0x1387; pop rbp; ret; 
0x0000000000000f4e: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000014b2: add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000001406: add byte ptr [rax], al; xor eax, 1; leave; ret; 
0x0000000000000f4d: add byte ptr [rax], r8b; pop rbp; ret; 
0x00000000000011f5: add byte ptr [rbp + rax - 0x18], dh; ret; 
0x0000000000001342: add byte ptr [rcx - 0x15], dh; sbb cl, byte ptr [rax - 0x77]; ret; 
0x00000000000013d8: add byte ptr [rdi + 1], bh; call 0x1387; pop rbp; ret; 
0x00000000000013da: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x1387; pop rbp; ret; 
0x0000000000000f8a: add eax, 0x200ff9; test rax, rax; je 0xfa0; pop rbp; jmp rax; 
0x0000000000000f3d: add eax, 0x20102e; test rax, rax; je 0xf50; pop rbp; jmp rax; 
0x0000000000000fda: add eax, 0x201040; add ebx, esi; ret; 
0x0000000000000e1e: add eax, 0x2010fd; test rax, rax; je 0xe2d; call 0xe58; add rsp, 8; ret; 
0x0000000000000fdf: add ebx, esi; ret; 
0x000000000000140a: add ecx, ecx; ret; 
0x0000000000001367: add esp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000000e2e: add esp, 8; ret; 
0x0000000000001366: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000000e2d: add rsp, 8; ret; 
0x0000000000000fdd: and byte ptr [rax], al; add ebx, esi; ret; 
0x0000000000000e21: and byte ptr [rax], al; test rax, rax; je 0xe2d; call 0xe58; add rsp, 8; ret; 
0x0000000000000f40: and byte ptr [rax], al; test rax, rax; je 0xf50; pop rbp; jmp rax; 
0x0000000000000f8d: and byte ptr [rax], al; test rax, rax; je 0xfa0; pop rbp; jmp rax; 
0x000000000000100d: and byte ptr [rax], al; test rax, rax; je 0xffd; push rbp; mov rbp, rsp; call rax; 
0x0000000000001344: and ebx, ebp; sbb cl, byte ptr [rax - 0x77]; ret; 
0x0000000000001371: call 0x1020; call 0x11ff; call 0x10de; mov eax, 0; pop rbp; ret; 
0x000000000000137b: call 0x10de; mov eax, 0; pop rbp; ret; 
0x0000000000001376: call 0x11ff; call 0x10de; mov eax, 0; pop rbp; ret; 
0x00000000000013de: call 0x1387; pop rbp; ret; 
0x0000000000001403: call 0x140d; xor eax, 1; leave; ret; 
0x0000000000000e28: call 0xe58; add rsp, 8; ret; 
0x0000000000001082: call 0xe68; mov edi, 0x40; call 0xeb8; nop; pop rbp; ret; 
0x000000000000108c: call 0xeb8; nop; pop rbp; ret; 
0x0000000000001361: call 0xec0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000142b: call 0xec8; test eax, eax; sete al; leave; ret; 
0x000000000000135c: call 0xee0; call 0xec0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000001623: call qword ptr [rax]; 
0x000000000000101f: call qword ptr [rbp + 0x48]; 
0x0000000000001018: call rax; 
0x000000000000110a: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000011fc: dec ecx; ret; 
0x000000000000148c: fmul qword ptr [rax - 0x7d]; ret; 
0x0000000000001229: imul edi, esp, -1; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000013d6: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x1387; pop rbp; ret; 
0x000000000000142f: inc dword ptr [rbp - 0x3f6bf040]; leave; ret; 
0x0000000000000f39: jbe 0xf50; mov rax, qword ptr [rip + 0x20102e]; test rax, rax; je 0xf50; pop rbp; jmp rax; 
0x0000000000000e26: je 0xe2d; call 0xe58; add rsp, 8; ret; 
0x0000000000000f45: je 0xf50; pop rbp; jmp rax; 
0x0000000000000f86: je 0xfa0; mov rax, qword ptr [rip + 0x200ff9]; test rax, rax; je 0xfa0; pop rbp; jmp rax; 
0x0000000000000f92: je 0xfa0; pop rbp; jmp rax; 
0x0000000000001012: je 0xffd; push rbp; mov rbp, rsp; call rax; 
0x0000000000001793: jmp qword ptr [rbp]; 
0x000000000000168b: jmp qword ptr [rcx]; 
0x0000000000001001: jmp qword ptr [rsi + 0xf]; 
0x0000000000000f48: jmp rax; 
0x000000000000157b: jmp rsp; 
0x0000000000000fd7: lcall [rbp - 0x3a]; add eax, 0x201040; add ebx, esi; ret; 
0x00000000000010dc: leave; ret; 
0x0000000000001380: mov eax, 0; pop rbp; ret; 
0x0000000000000f89: mov eax, dword ptr [rip + 0x200ff9]; test rax, rax; je 0xfa0; pop rbp; jmp rax; 
0x0000000000000f3c: mov eax, dword ptr [rip + 0x20102e]; test rax, rax; je 0xf50; pop rbp; jmp rax; 
0x0000000000000e1d: mov eax, dword ptr [rip + 0x2010fd]; test rax, rax; je 0xe2d; call 0xe58; add rsp, 8; ret; 
0x0000000000001016: mov ebp, esp; call rax; 
0x00000000000013d2: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x1387; pop rbp; ret; 
0x0000000000001087: mov edi, 0x40; call 0xeb8; nop; pop rbp; ret; 
0x00000000000013d9: mov edi, 1; call 0x1387; pop rbp; ret; 
0x0000000000001401: mov edi, eax; call 0x140d; xor eax, 1; leave; ret; 
0x0000000000001429: mov edi, eax; call 0xec8; test eax, eax; sete al; leave; ret; 
0x00000000000013d4: mov esi, 0xffff; mov edi, 1; call 0x1387; pop rbp; ret; 
0x00000000000013fe: mov esi, edx; mov rdi, rax; call 0x140d; xor eax, 1; leave; ret; 
0x0000000000000f8c: mov rax, cr0; test rax, rax; je 0xfa0; pop rbp; jmp rax; 
0x000000000000100c: mov rax, cr0; test rax, rax; je 0xffd; push rbp; mov rbp, rsp; call rax; 
0x0000000000000f88: mov rax, qword ptr [rip + 0x200ff9]; test rax, rax; je 0xfa0; pop rbp; jmp rax; 
0x0000000000000f3b: mov rax, qword ptr [rip + 0x20102e]; test rax, rax; je 0xf50; pop rbp; jmp rax; 
0x0000000000000e1c: mov rax, qword ptr [rip + 0x2010fd]; test rax, rax; je 0xe2d; call 0xe58; add rsp, 8; ret; 
0x0000000000001015: mov rbp, rsp; call rax; 
0x00000000000013d1: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x1387; pop rbp; ret; 
0x0000000000001400: mov rdi, rax; call 0x140d; xor eax, 1; leave; ret; 
0x0000000000001428: mov rdi, rax; call 0xec8; test eax, eax; sete al; leave; ret; 
0x00000000000013fd: mov rsi, rdx; mov rdi, rax; call 0x140d; xor eax, 1; leave; ret; 
0x0000000000000f4b: nop dword ptr [rax + rax]; pop rbp; ret; 
0x0000000000000f4a: nop word ptr [rax + rax]; pop rbp; ret; 
0x00000000000010db: nop; leave; ret; 
0x0000000000001091: nop; pop rbp; ret; 
0x0000000000000f93: or al, 0x5d; jmp rax; 
0x000000000000149c: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000000149e: pop r13; pop r14; pop r15; ret; 
0x00000000000014a0: pop r14; pop r15; ret; 
0x00000000000014a2: pop r15; ret; 
0x0000000000000f47: pop rbp; jmp rax; 
0x000000000000149b: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000000149f: pop rbp; pop r14; pop r15; ret; 
0x0000000000000f50: pop rbp; ret; 
0x000000000000136a: pop rbx; pop rbp; ret; 
0x00000000000014a3: pop rdi; ret; 
0x00000000000014a1: pop rsi; pop r15; ret; 
0x000000000000149d: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000001014: push rbp; mov rbp, rsp; call rax; 
0x000000000000131a: ret 0x200c; 
0x0000000000000e52: ret 0x2010; 
0x000000000000110d: ret 0x8b48; 
0x0000000000000e31: ret; 
0x0000000000001011: sal byte ptr [rcx + rbp*8 + 0x55], 0x48; mov ebp, esp; call rax; 
0x0000000000000f87: sbb byte ptr [rax - 0x75], cl; add eax, 0x200ff9; test rax, rax; je 0xfa0; pop rbp; jmp rax; 
0x0000000000001346: sbb cl, byte ptr [rax - 0x77]; ret; 
0x0000000000001432: sete al; leave; ret; 
0x0000000000000f8b: stc; mov rax, cr0; test rax, rax; je 0xfa0; pop rbp; jmp rax; 
0x0000000000000e29: sub eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000014b5: sub esp, 8; add rsp, 8; ret; 
0x00000000000014b4: sub rsp, 8; add rsp, 8; ret; 
0x0000000000000f9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000000e24: test eax, eax; je 0xe2d; call 0xe58; add rsp, 8; ret; 
0x0000000000000f43: test eax, eax; je 0xf50; pop rbp; jmp rax; 
0x0000000000000f90: test eax, eax; je 0xfa0; pop rbp; jmp rax; 
0x0000000000001010: test eax, eax; je 0xffd; push rbp; mov rbp, rsp; call rax; 
0x0000000000001430: test eax, eax; sete al; leave; ret; 
0x0000000000000e23: test rax, rax; je 0xe2d; call 0xe58; add rsp, 8; ret; 
0x0000000000000f42: test rax, rax; je 0xf50; pop rbp; jmp rax; 
0x0000000000000f8f: test rax, rax; je 0xfa0; pop rbp; jmp rax; 
0x000000000000100f: test rax, rax; je 0xffd; push rbp; mov rbp, rsp; call rax; 
0x0000000000001408: xor eax, 1; leave; ret; 

131 gadgets found
